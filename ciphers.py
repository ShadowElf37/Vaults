from Crypto.Cipher import ChaCha20
from Crypto.Hash import SHA3_256
from os import urandom

ENCODING = 'utf-8'

class CipherGenerator:
    SALTS = [
        b'\x9f\x86\xf9\x8b9s.>\x92\x7f\x96\x0eE\x8e\xd1j\xf2\x08Q\xe8\xff\xa7@n\xb9\x81\xc8\x83kd\xb2W\xfd\xe0\x93\xff\x1b@\r\xfdM\x17\x90#\xaef\xff\x87\x96\xb8\xb8\x04\xde\xa9\x060\xc7z\xa0\x14\xa6\xc3O\xeb\xf0G\x0e\xcc\x1c\xb6\xcfy_\xa4\'\xc2P\xb0#\x1d\xd5\x01,x%\x12\x96e\x11k\xa2h \x0b\xa2 \x1d\xa1\xb2#\xac\x7f\xa6\xaa\xdf\xac?\x913%!18i\x9d\x93\xf5@I\x1f\x87\xef\xa9\x8e\xf7|u\xd7:!]\x7fW\xc4\x12\x8f\x9a.P\x1d\xe7\xcbV\xd80\x02U\x01:ut"\xcd\xc4\x9aCce\xe3\xf4\x10\x930\xe92\xc4\xbcQ]\xac\xad\xc20\x96ZLY\x11M4\xc8*\x96\xbc\xad~E\xb7 S\xfct\xa8\x10\xfc\x8d\x8e\xf0\x11\xbf\xe5\x12m\r\xf3~\x82R_\xc8B\xd1\xda@$2\x86\xda\xbf\x10\x99\x80\x1e?y^\xd1\xd3jn\xa4\xac}\xffkw=[\x12\xe6\xca\xf2\xad\xad\xd9\xa73\x8fm\xa5O\xb03\x01\xc2\x8c'
        b'\x06\xee\xea l%\x0c\xfb\xba\xd5Z~9\xeb\xaa`t\x13\xdcZ"\xeb\xb8\xa3\xfeFQ\x962\x8a\xd5\xb6I\xb7\xac\x03\xc4\xfd\xe1)\x12\xa5\x93)\xddVm\n\xa7\xdc\xac\xa2\\C5\xee\xd3\xe9\xf8\xdd\xd3\x8aB\xef\xfd\x83\xdd#\x9c\xd1k\x0b\xa3\x93\x99\xa0<\xfd\xa3\x1a\x1d\xaa,Q\xe6\x0bU\xa5\xc9\xdfn:g\xf3\x0f=\xed\x15\xa7e@\x13\x9f\xf5\x81\x8f\xcaI^\x89P\x05\xea\x8a\x9d\xdf\xc5U \x1cW\xf3;\x9d1\x95\x10/(u\x16R|N\xb2\xbf>\xa0\xc1\xd0\xa9_\xe38\xd2\xf4\x12D\xc5\xab\x08\x8c-\xcaqi\x11\x1b\xcc\xd34\xa0k\xf8\x0c\x9c\x16[\x16\xda\xb9\x97\x19\xdfQU\x88^T\xde_\xfcht\xbe\x86\x1dqc\xa4.]\x02\xd9V\xfb\xd7il\x02\xb9b\xb4\x8f\xda\xf5\x84\xd8M\xd6\x88\xf2\xbf\xf73\x86\x85KN+5&\x87\xb8\x8f\x91\xd4Q\x7f*U\xf5\xf1\x90\x07\xcc\xd9\x9a\xcd7\xc3\x86\x7fk\xa2\x9c\xd1\xfc\x8968\xbd\x11\x93\xb62'
        b'\x19\xedXf[\x80\xd3\x97\xae\xc5y\x8dwR\xea\xb2}21\n\xe5\x06_\n\xa5\xc2\xe2\x873H\xafk\xf6\x9c2H\xbe\'\xf1gZ\x82[\xc9_\xeea[\x8a\xf70\xa0\x1c\xf7\x96:\x8e\n\xfb[\x14\x93\xfcvR\xdfr\x15uD\xb2\x8c\x9dFbVx\xf6\xc3\x93oV\x80y\x05>\xef\x10\x1a\xab\x1b\x84]ct\xe8\x89\x08\xdf\xd2]\xd0\xbf\\hv\x800(\xa0\x1f\xee\x9f"_s\x91\xa0N\xf8\xb4Ju\\\x8dJ\xa7\x93\x06\xd3\'\x13S\xe4I|\x16\x86\xb98r\xe1\x98\xce.9\x9a\x80\xe3\x84n\xed\x1e\xd2N\xe9\xa4\x8d\x84e2\xfa\xee\xec@t\xdc\x95\xd7\x0c\'1\xaa\xe5b?\xea\x1dVGN+\xde\x0eY\x01#\xea)\x7fY\xfa(\xe1\xccE k\x11]AX\xeb\x98\xaa]U\x92X\xc3\xfd\xe2v\x1ag\xff\x97\xed6\x9d\xae\xdf\xde\xfc\xb4\xa8(\xb6\xa7Y\xfc\xbdT\x9d!\x8be\x99Y\xb8\xb4\xe7.\xccb\x0e\x83\xc5\x95!3\x8dl\xfam\x18'
    ]

    def __init__(self, password):
        self.keys = self.gen_keys(password)

    @classmethod
    def gen_keys(cls, pwd: str):
        keys = []
        for salt in CipherGenerator.SALTS:
            hasher = SHA3_256.new(pwd.encode(ENCODING) + salt)
            for _ in range(1000):
                hasher = SHA3_256.new(hasher.digest())
            keys.append(hasher.digest())
        return keys
    @classmethod
    def gen_nonce(cls):
        return urandom(12)

    def renew(self, nonce=None):
        if nonce is None:
            nonce = self.gen_nonce()
        return Cipher([ChaCha20.new(key=k, nonce=nonce) for k in self.keys])

class Cipher:
    def __init__(self, ciphers):
        self.ciphers = ciphers
    def encrypt(self, data):
        for cipher in self.ciphers:
            data = cipher.encrypt(data)
        return data
    def decrypt(self, data):
        for cipher in reversed(self.ciphers):
            data = cipher.decrypt(data)
        return data


